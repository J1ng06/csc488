/*
    DEFINITIONS for CSC488S Source Language Winter 2016
*/

package compiler488.parser;

import compiler488.ast.*;
import compiler488.ast.Readable;
import compiler488.ast.stmt.*;
import compiler488.ast.expn.*;
import compiler488.ast.decl.*;
import compiler488.ast.type.*;

// TODO: You can add Java import statements here as necessary

/*
    SYMBOL LISTS

    CUP reserved words are case-sensitive and cannot be used as names of
    terminals or non-terminals. This list includes the following:

        action code extends import init left non nonassoc nonterminal package
        parser precedence right scan start super terminal with

*/

// Keyword terminals returned by the scanner (with no value attached):
terminal AND, OR, NOT, TRUE, FALSE;
terminal BOOLEAN, INTEGER, FUNCTION, PROCEDURE;
terminal DO, ELSE, EXIT, IF;
terminal READ, REPEAT, RETURN, NEWLINE, THEN, UNTIL;
terminal VAR, WHEN, WHILE, WITH, WRITE;

// Special-character terminals (with no value attached):
terminal L_PAREN, R_PAREN, L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY;
terminal EQUAL, GREATER, LESS, COMMA, DOT, QUESTION, COLON;
terminal PLUS, MINUS, TIMES, DIVIDE;

// Terminals returned by the scanner that carry a value of a specific Java type:
terminal String     IDENT;
terminal Integer    INTCONST;
terminal String     TEXTCONST;

/*
    To define non-terminals that return no value:

        nonterminal nameList;

    To define non-terminals that do return a value (think AST generation):

        nonterminal JavaType nameList;
*/

 

nonterminal Program program;
nonterminal Stmt statement;
nonterminal Declaration declaration;
nonterminal Scope scope;
nonterminal ASTList<Stmt> statements;
nonterminal ASTList<Declaration> declarations;
nonterminal Stmt matchedStatement;
nonterminal Stmt unmatchedStatement;
nonterminal ASTList<DeclarationPart> variablenames;
nonterminal Printable output;
nonterminal Type type;
nonterminal ASTList<Expn> arguments;
nonterminal ASTList<ScalarDecl> parameters;
nonterminal Expn variable;
nonterminal Expn expression;
nonterminal DeclarationPart variablename;
nonterminal ASTList<Readable> inputs;
nonterminal ASTList<Printable> outputs;
nonterminal ArrayBoundPart bound;
nonterminal Integer generalBound;
nonterminal Stmt procedureCall;
nonterminal ScalarDecl parameter;
nonterminal Expn conjunction;
nonterminal Expn negation;
nonterminal Expn compareExpn;
nonterminal Expn arithExpn;
nonterminal Expn term;
nonterminal Expn factor;
nonterminal Expn primary;
nonterminal ConstExpn constant;

/*
    PLEASE NOTE: Your grammar may not use the 'precedence' feature of JCup to
    resolve the precedence of arithmetic operators.

    The two lines below must remain commented out;
*/

// precedence left PLUS, MINUS;
// precedence left TIMES, DIVIDE; // Higher precedence.

//  Use precedence to associate else with closest if
precedence left ELSE;

/*
    GRAMMAR SECTION
*/

// This specifies the initial symbol of the grammar.
start with program;

/*
    Notice that sometimes the action must be inside the production rule, not after
    it. This is a subtle yet significant difference from YACC. This is because the
    CUP parser is looking ahead one token. It ALWAYS reads one more token before it
    will act on the production.
 */

program 
	::= scope:s		
			{: RESULT = new Program(s, sleft, sright); :}                           // the main program
    ;

scope
    ::= L_CURLEY:lc declarations:decl statements:stmt R_CURLEY                                 // scope with declarations and statements
            {: RESULT = new Scope((ASTList<Declaration>) decl, (ASTList<Stmt>) stmt, lcleft, lcright ); :}
    |   L_CURLEY:lc statements:stmt R_CURLEY                                                   // scope with statements only
            {: RESULT = new Scope(null, (ASTList<Stmt>) stmt, lcleft, lcright); ; :} 
    |   L_CURLEY:lc R_CURLEY                                                                   // empty scope
            {: RESULT = new Scope(null, null, lcleft, lcright); :}
    ;

statements
    ::= statement:stmt                                  // sequence of statements
            {: RESULT = new ASTList<Stmt>(stmt); :}
    |   statements:list statement:stmt
            {: RESULT = list.append(stmt); :}
    ;

declarations
    ::= declaration:decl                                        // sequence of declarations
            {: RESULT = new ASTList<Declaration>(decl); :}
    |   declarations:list declaration:decl
            {: RESULT = list.append(decl); :}
    ;

statement
    ::= matchedStatement:ms
            {: RESULT = ms; :}
    |   unmatchedStatement:us
            {: RESULT = us; :}
    ;

matchedStatement
    ::= variable:var COLON EQUAL expression:expn                                            // assignment statement
            {: RESULT = new AssignStmt(var, expn, varleft, varright); :}
    |   IF:_if expression:cond THEN matchedStatement:ifTrue ELSE matchedStatement:ifFalse       // if statements
            {: RESULT = new IfStmt(cond, ifTrue, ifFalse, _ifleft, _ifright); :}
    |   WHILE:whl expression:cond DO statement:body                                             // while statement
            {: RESULT = new WhileDoStmt(cond, new ASTList<Stmt>(body), whlleft, whlright); :}
    |   REPEAT:rpt statements:body UNTIL expression:cond                                        // repeat statement
            {:RESULT = new RepeatUntilStmt(cond, body, rptleft, rptright); :}
    |   EXIT:ext                                                                                // exit statements
            {: RESULT = new ExitStmt(new BoolConstExpn(true, extleft, extright), 1, extleft, extright); :}
    |   EXIT:ext INTCONST:levels
            {: RESULT = new ExitStmt(new BoolConstExpn(true, extleft, extright), levels, extleft, extright); :}
    |   EXIT:ext WHEN expression:cond
            {: RESULT = new ExitStmt(cond, 1, extleft, extright); :}
    |   EXIT:ext INTCONST:levels WHEN expression:cond
            {: RESULT = new ExitStmt(cond, levels, extleft, extright); :}
    |   RETURN WITH:rtnw expression:retval                                                       // return statements
            {: RESULT = new ReturnStmt(retval, rtnwleft, rtnwright); :}
    |   RETURN:rtn
            {: RESULT = new ReturnStmt(null, rtnleft, rtnright); :}
    |   WRITE:wrt outputs:list                                                                  // input/output statements
            {: RESULT = new WriteStmt(list, wrtleft, wrtright); :}
    |   READ:rd inputs:list
            {: RESULT = new ReadStmt(list,rdleft,rdright); :}
    |   procedureCall:pc                                                                    // procedure call
            {: RESULT = pc; :}
    |   scope:s                                                                             // embedded scope
            {: RESULT = s; :}
    ;

unmatchedStatement
    ::= IF:_if expression:cond THEN statement:ifTrue
            {: RESULT = new IfStmt(cond, ifTrue, _ifleft, _ifright); :}
    |   IF:_if expression:cond THEN matchedStatement:ifTrue ELSE unmatchedStatement:ifFalse
            {: RESULT = new IfStmt(cond, ifTrue, ifFalse, _ifleft, _ifright); :}
    ;

procedureCall
    ::= IDENT:name 
            {: RESULT = new ProcedureCallStmt(name, nameleft, nameright);:}
    |   IDENT:name L_PAREN arguments:args R_PAREN                               // call procedure with parameters
            {: RESULT = new ProcedureCallStmt(name, args, nameleft, nameright); :}
    ;

declaration
    ::= VAR:var variablenames:varnamelist COLON type:type                                       // declare scalar/array variables
            {: RESULT = new MultiDeclarations(type, varnamelist, varleft, varright); :}
    | FUNCTION:fc IDENT:name COLON type:type scope:body                                        // declare function
            {: RESULT = new RoutineDecl(name, type, body, fcleft, fcright); :}
    | FUNCTION:fc IDENT:name L_PAREN parameters:params R_PAREN COLON type:type scope:body
            {: RESULT = new RoutineDecl(name, type, params, body, fcleft, fcright); :}
    | PROCEDURE:pcd IDENT:name scope:body                                                       // declare procedure
            {: RESULT = new RoutineDecl(name, body, pcdleft, pcdright); :}
    | PROCEDURE:pcd IDENT:name L_PAREN parameters:params R_PAREN scope:body
            {: RESULT = new RoutineDecl(name, params, body, pcdleft, pcdright); :}
    ;

variablenames
    ::= variablename:varname                                        // list of variables being declared
            {: RESULT = new ASTList<DeclarationPart>(varname); :}
    |   variablenames:list COMMA variablename:varname
            {: RESULT = list.append(varname); :}
    ;

variablename
    ::= IDENT:name                                                                                      // scalar variable
            {: RESULT = new ScalarDeclPart(name, nameleft, nameright); :}
    |   IDENT:name L_SQUARE bound:b R_SQUARE                                                            // 1-dimension array variable
            {: RESULT = new ArrayDeclPart(name, b.getLb(), b.getUb(), nameleft, nameright); :}
    |   IDENT:name L_SQUARE bound:b1 COMMA bound:b2 R_SQUARE                                            // 2-dimensional array variable
            {: RESULT = new ArrayDeclPart(name, b1.getLb(), b1.getUb(), b2.getLb(), b2.getUb(), nameleft, nameright); :}
    ;

bound
    ::= INTCONST:ic                                         // positive array bound
            {: RESULT = new ArrayBoundPart(1, ic, icleft, icright); :}
    |   generalBound:gb1 DOT DOT generalBound:gb2           // upper and lower bounds
            {: RESULT = new ArrayBoundPart(gb1, gb2, gb1left, gb1right); :}
    ;

generalBound
    ::= INTCONST:ic                 // positive integer bounds
            {: RESULT = ic; :}
    |   MINUS INTCONST:ic           // negative integer bounds
            {: RESULT = -ic; :}
    ;

type
    ::= INTEGER:i                                // integer type
            {: RESULT = new IntegerType(ileft, iright); :}
    |   BOOLEAN:bool                                 // boolean type
            {: RESULT = new BooleanType(boolleft, boolright); :}
    ;

outputs
    ::= output:out                                          // list of output expressions
            {: RESULT = new ASTList<Printable>(out); :}
    |   outputs:list COMMA output:out
            {: RESULT = list.append(out); :}
    ;

output
    ::= expression:expn             // integer expression
            {: RESULT = expn; :}
    |   TEXTCONST:tc                                // text constant
            {: RESULT = new TextConstExpn(tc, tcleft, tcright); :}
    |   NEWLINE:nl                                     // newline constant
            {: RESULT = new TextConstExpn("\n", nlleft, nlright); :}
    ;

inputs
    ::= variable:var                                                        // list of variables being read into
            {: RESULT = new ASTList<Readable>(new ReadableExpn(var)); :}
    |   inputs:list COMMA variable:var
            {: RESULT = list.append(new ReadableExpn(var)); :}
    ;

arguments
    ::= expression:expn                                 // list of function/procedure arguments
            {: RESULT = new ASTList<Expn>(expn); :}
    |   arguments:list COMMA expression:expn
            {: RESULT = list.append(expn); :}
    ;

parameters
    ::= parameter:param                                        // list of function/procedure formal parameters 
            {: RESULT = new ASTList<ScalarDecl>(param); :}
    |   parameters:list COMMA parameter:param
            {: RESULT = list.append(param); :}
    ;

parameter
    ::= IDENT:name COLON type:t                         // declare one parameter
            {: RESULT = new ScalarDecl(name, t, nameleft, nameright); :}

    ;

expression
    ::= conjunction:c                                   // disjunctions, associate left-to-right
            {: RESULT = c; :}
    |   expression:e OR conjunction:c
            {: RESULT = new BoolExpn("or", e, c, eleft, eright); :}
    ;

conjunction
    ::= negation:n                                      // conjunctions, associate left-to-right
            {: RESULT = n; :}
    |   conjunction:c AND negation:n
            {: RESULT = new BoolExpn("and", c, n, cleft, cright); :}
    ;

negation
    ::= compareExpn:ce                                  // negations
            {: RESULT = ce; :}
    |   NOT:not negation:n
            {: RESULT = new NotExpn(n, notleft, notright ); :}
    ;

compareExpn
    ::= arithExpn:ae                                        // comparisons, do not associate
            {: RESULT = ae; :}
    |   arithExpn:ae1 EQUAL arithExpn:ae2
            {: RESULT = new EqualsExpn("=", ae1, ae2, ae1left, ae1right); :}
    |   arithExpn:ae1 NOT EQUAL arithExpn:ae2
            {: RESULT = new EqualsExpn("not =", ae1, ae2, ae1left, ae1right); :}
    |   arithExpn:ae1 LESS arithExpn:ae2
            {: RESULT = new CompareExpn("<", ae1, ae2, ae1left, ae1right); :}
    |   arithExpn:ae1 LESS EQUAL arithExpn:ae2
            {: RESULT = new CompareExpn("<=", ae1, ae2, ae1left, ae1right); :}
    |   arithExpn:ae1 GREATER arithExpn:ae2
            {: RESULT = new CompareExpn(">", ae1, ae2, ae1left, ae1right); :}
    |   arithExpn:ae1 GREATER EQUAL arithExpn:ae2
            {: RESULT = new CompareExpn(">=", ae1, ae2, ae1left, ae1right); :}
    ;

arithExpn
    ::= term:t                                              // expressions, associate + , - left-to-right
            {: RESULT = t; :}
    |   arithExpn:ae PLUS term:_term
            {: RESULT = new ArithExpn("+", ae, _term, aeleft, aeright); :}
    |   arithExpn:ae MINUS term:_term
            {: RESULT = new ArithExpn("-", ae, _term, aeleft, aeright); :}
    ;

term
    ::= factor:f                                            // terms, associate * , / left-to-right
            {: RESULT = f; :}
    |   term:t TIMES factor:f
            {: RESULT = new ArithExpn("*", t, f, tleft, tright); :}
    |   term:t DIVIDE factor:f
            {: RESULT = new ArithExpn("/", t, f, tleft, tright); :}
    ;

factor
    ::= primary:p                                       // unary minus
            {: RESULT = p; :}
    |   MINUS:m factor:f
            {: RESULT = new UnaryMinusExpn(f, mleft, mright); :}
    ;

primary
    ::= constant:c                                                                              // integer or boolean constant
            {: RESULT = c; :}
    |   variable:v                                                                              // scalar, array variable or function call
            {: RESULT = v; :}
    |   IDENT:name L_PAREN arguments:args R_PAREN                                               // function call
            {: RESULT = new FunctionCallExpn(name, args, nameleft, nameright); :}
    |   L_PAREN expression:expn R_PAREN                                                         // parenthesized expression
            {: RESULT = expn; :}
    |   L_PAREN:lp expression:cond QUESTION expression:ifTrue COLON expression:ifFalse R_PAREN     // conditional expression
            {: RESULT = new ConditionalExpn(cond, ifTrue, ifFalse, lpleft, lpright); :}
    ;

constant
    ::= INTCONST:ic                                     // integer constant
            {: RESULT = new IntConstExpn(ic, icleft, icright); :}
    |   TRUE:bv                                           // constant true
            {: RESULT = new BoolConstExpn(true, bvleft, bvright ); :}
    |   FALSE:bv                                           // constant false
            {: RESULT = new BoolConstExpn(false, bvleft, bvright); :}    
    ;

variable
    ::= IDENT:id                                                                // scalar variable or function call
            {: RESULT = new IdentExpn(id,idleft, idright); :}
    |   IDENT:id L_SQUARE expression:expn R_SQUARE                              // element of 1-dimensional array
            {: RESULT = new SubsExpn(id, expn, idleft, idright); :}
    |   IDENT:id L_SQUARE expression:expn1 COMMA expression:expn2 R_SQUARE      // element of 2-dimensional array;
            {: RESULT = new SubsExpn(id, expn1, expn2, idleft, idright); :}
    ;
